//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""80a5c849-3f38-44fc-a731-f8a66fdcb6ad"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Fishing"",
            ""id"": ""274b4586-1d0c-4d21-94d6-4735f32501d4"",
            ""actions"": [
                {
                    ""name"": ""CastFishingRod"",
                    ""type"": ""Button"",
                    ""id"": ""09aba160-9fcd-4a08-84e1-56aadd0f0641"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlFishingRod"",
                    ""type"": ""Value"",
                    ""id"": ""b950254d-ab34-4e99-96ab-1438e1478ac8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ce40bd1-8155-4cb7-a546-dd57626e1da4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastFishingRod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""972f7f5e-05a5-4a42-8916-6f73d4a546aa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastFishingRod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3560ac05-7427-46b1-a77b-a0acb5d7fe33"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastFishingRod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57d1f3dd-5791-401e-be65-5d0f095b52c6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlFishingRod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b493c83-5b47-4484-8e17-dd46d5d69282"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlFishingRod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b67fbc4-ed63-4e15-87c0-4852d41373e3"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlFishingRod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        // Fishing
        m_Fishing = asset.FindActionMap("Fishing", throwIfNotFound: true);
        m_Fishing_CastFishingRod = m_Fishing.FindAction("CastFishingRod", throwIfNotFound: true);
        m_Fishing_ControlFishingRod = m_Fishing.FindAction("ControlFishingRod", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInputActions.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Fishing.enabled, "This will cause a leak and performance issues, PlayerInputActions.Fishing.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Fishing
    private readonly InputActionMap m_Fishing;
    private List<IFishingActions> m_FishingActionsCallbackInterfaces = new List<IFishingActions>();
    private readonly InputAction m_Fishing_CastFishingRod;
    private readonly InputAction m_Fishing_ControlFishingRod;
    public struct FishingActions
    {
        private @PlayerInputActions m_Wrapper;
        public FishingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CastFishingRod => m_Wrapper.m_Fishing_CastFishingRod;
        public InputAction @ControlFishingRod => m_Wrapper.m_Fishing_ControlFishingRod;
        public InputActionMap Get() { return m_Wrapper.m_Fishing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingActions set) { return set.Get(); }
        public void AddCallbacks(IFishingActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingActionsCallbackInterfaces.Add(instance);
            @CastFishingRod.started += instance.OnCastFishingRod;
            @CastFishingRod.performed += instance.OnCastFishingRod;
            @CastFishingRod.canceled += instance.OnCastFishingRod;
            @ControlFishingRod.started += instance.OnControlFishingRod;
            @ControlFishingRod.performed += instance.OnControlFishingRod;
            @ControlFishingRod.canceled += instance.OnControlFishingRod;
        }

        private void UnregisterCallbacks(IFishingActions instance)
        {
            @CastFishingRod.started -= instance.OnCastFishingRod;
            @CastFishingRod.performed -= instance.OnCastFishingRod;
            @CastFishingRod.canceled -= instance.OnCastFishingRod;
            @ControlFishingRod.started -= instance.OnControlFishingRod;
            @ControlFishingRod.performed -= instance.OnControlFishingRod;
            @ControlFishingRod.canceled -= instance.OnControlFishingRod;
        }

        public void RemoveCallbacks(IFishingActions instance)
        {
            if (m_Wrapper.m_FishingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingActions @Fishing => new FishingActions(this);
    public interface IPlayerActions
    {
    }
    public interface IFishingActions
    {
        void OnCastFishingRod(InputAction.CallbackContext context);
        void OnControlFishingRod(InputAction.CallbackContext context);
    }
}
